#!/usr/bin/env bash
DIR=$(cd $(dirname $0) && pwd)
# set -e

echo "DIR=$DIR"

#
# Helpers
##################################################

export PATH="$PATH:$DIR/node_modules/.bin"

source bash-partials/colors.sh
source bash-partials/require.sh

function run() {
  echo "[dot] $@"
  "$@"
}

#
# Commands
##################################################

function build() {
  run rm -rf dist/*.sh
  run rm -rf build

  run mkdir -p dist
  run mkdir -p build/src
  run mkdir -p build/bash-partials

  run yarn tsc -p tsconfig.json
  run node build/src/generate.js
  run cp build/src/index.sh dist/bash.sh

  run rm -rf build

  # preserve existing package.json
  if [ ! -f dist/package.json ]; then
    echo '{"name":"dotfiles","version":"1.0.0","private":true,"license":"UNLICENSED"}' > dist/package.json
  fi

  pushd dist
  run yarn
  popd
}

function update() {
  build

  pushd dist
  run yarn upgrade --latest
  popd
}

#
# CLI
##################################################

#
# Call the function specified by the first parameter, passing all remaining
# parameters to the function. If no such function exists, display usage info.
#
if [ -n "$1" ] && type $1 | grep -i function > /dev/null; then
  run yarn
  command="$1"
  shift
  $command ${@}
else
  fail "[dot] No such command: $1"
fi
