#!/usr/bin/env bash
set -e

#
# Helpers
##################################################

export PATH="$PATH:node_modules/.bin"
export ROOT="$PWD"

source src/bash-partials/colors.sh
source src/bash-partials/env.sh

run() {
  echo "$@"
  "$@"
}

#
# Commands
##################################################

lint() {
  run tslint \
    --project tsconfig.json \
    --config tslint.json \
    --format stylish \
    --fix
}

build() {
  run rm -rf dist/*.sh
  run rm -rf dist/node
  run rm -rf build

  run mkdir -p dist/node
  run mkdir -p build/bash
  run mkdir -p build/bash-partials
  run mkdir -p build/node

  run tsc -p tsconfig.json
  run node build/bash/generate.js

  run cp -R build/node/* dist/node/
  run cp build/bash/index.sh dist/bash.sh

  # preserve existing package.json
  if [ ! -f dist/package.json ]; then
    run cp src/package.json dist/package.json
  fi
}

dot_yarn() {
  if [ -z "$DOT_PATH" ]; then
    echo This should only be called from within sourced dotfiles.
    return
  fi

  export PATH="$SYSTEM_PATH"
  cd "$DOT_ROOT"
  which yarn
  (
    run yarn "$@"
  )
  export PATH="$DOT_PATH"
}

update() {
  build

  run cd "$ROOT/dist"
  run source bash.sh

  run cd "$ROOT/build/install"
  run node index.js

  dot_yarn upgrade --latest
}

install() {
  run rm -rf dist
  update
}

#
# CLI
##################################################

#
# Call the function specified by the first parameter, passing all remaining
# parameters to the function. If no such function exists, display usage info.
#
if [ -n "$1" ] && type $1 | grep -i function > /dev/null; then
  yarn
  command="$1"
  shift
  $command ${@}
else
  fail "No such command: $1"
fi
